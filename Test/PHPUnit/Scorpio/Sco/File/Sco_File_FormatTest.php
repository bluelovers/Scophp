<?php

require_once dirname(__FILE__) . '/../../../../../Scorpio/Sco/File/Format.php';

/**
 * Test class for Sco_File_Format.
 * Generated by PHPUnit on 2012-06-29 at 11:52:11.
 */
class Sco_File_FormatTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @var Sco_File_Format
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Sco_File_Format;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\test.txt') == '../test/test.txt/'.
	 *
	 * @covers Sco_File_Format::dirname
	 */
	public function testDirname()
	{
		$this->assertEquals(
				'../test/test.txt/'
				, Sco_File_Format::dirname('../test/.././test/./.\/\/\test.txt')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\test.txt', '', true) == '../test/'.
	 *
	 * @covers Sco_File_Format::dirname
	 */
	public function testDirname2()
	{
		$this->assertEquals(
				'../test/'
				, Sco_File_Format::dirname('../test/.././test/./.\/\/\test.txt', '', true)
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\test.txt', '../', true) == '../'.
	 *
	 * @covers Sco_File_Format::dirname
	 */
	public function testDirname3()
	{
		$this->assertEquals(
				'../'
				, Sco_File_Format::dirname('../test/.././test/./.\/\/\test.txt', '../', true)
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\/') == '../test/'.
	 *
	 * @covers Sco_File_Format::fix
	 */
	public function testFix()
	{
		$this->assertEquals(
				'../test/'
				, Sco_File_Format::fix('../test/.././test/./.\/\/\/')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\.') == '../test/.'.
	 *
	 * @covers Sco_File_Format::fix
	 */
	public function testFix2()
	{
		$this->assertEquals(
				'../test/.'
				, Sco_File_Format::fix('../test/.././test/./.\/\/\.')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\test.txt') == '../test/test.txt'.
	 *
	 * @covers Sco_File_Format::fix
	 */
	public function testFix3()
	{
		$this->assertEquals(
				'../test/test.txt'
				, Sco_File_Format::fix('../test/.././test/./.\/\/\test.txt')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\/') == '../test/'.
	 *
	 * @covers Sco_File_Format::path
	 */
	public function testPath()
	{
		$this->assertEquals(
				'../test/'
				, Sco_File_Format::path('../test/.././test/./.\/\/\/')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\/.') == '../test/'.
	 *
	 * @covers Sco_File_Format::path
	 */
	public function testPath2()
	{
		$this->assertEquals(
				'../test/'
				, Sco_File_Format::path('../test/.././test/./.\/\/\/.')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\test.txt') == '../test/test.txt/'.
	 *
	 * @covers Sco_File_Format::path
	 */
	public function testPath3()
	{
		$this->assertEquals(
				'../test/test.txt/'
				, Sco_File_Format::path('../test/.././test/./.\/\/\test.txt')
		);
	}

	/**
	 * Generated from @assert ('../test/.././test/./.\/\/\test.txt') == '../test/test.txt'.
	 *
	 * @covers Sco_File_Format::file
	 */
	public function testFile()
	{
		$this->assertEquals(
				'../test/test.txt'
				, Sco_File_Format::file('../test/.././test/./.\/\/\test.txt')
		);
	}

	/**
	 * @covers Sco_File_Format::remove_root
	 * @todo Implement testRemove_root().
	 */
	public function testRemove_root()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Sco_File_Format::basename
	 * @todo Implement testBasename().
	 */
	public function testBasename()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}

?>
