<?php

require_once dirname(__FILE__) . '/../../../../../../Scorpio/Sco/Math/Func/Distance.php';

/**
 * Test class for Sco_Math_Func_Distance.
 * Generated by PHPUnit on 2012-07-02 at 13:15:42.
 */
class Sco_Math_Func_DistanceTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @var Sco_Math_Func_Distance
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Sco_Math_Func_Distance;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 * Generated from @assert (10, 0) == 10.
	 *
	 * @covers Sco_Math_Func_Distance::ManhattanDistance
	 */
	public function testManhattanDistance()
	{
		$this->assertEquals(
				10
				, Sco_Math_Func_Distance::ManhattanDistance(10, 0)
		);
	}

	/**
	 * Generated from @assert (0, 10) == 10.
	 *
	 * @covers Sco_Math_Func_Distance::ManhattanDistance
	 */
	public function testManhattanDistance2()
	{
		$this->assertEquals(
				10
				, Sco_Math_Func_Distance::ManhattanDistance(0, 10)
		);
	}

	/**
	 * Generated from @assert (5, 5) == 10.
	 *
	 * @covers Sco_Math_Func_Distance::ManhattanDistance
	 */
	public function testManhattanDistance3()
	{
		$this->assertEquals(
				10
				, Sco_Math_Func_Distance::ManhattanDistance(5, 5)
		);
	}

	/**
	 * Generated from @assert (+0, +0) == 0.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass()
	{
		$this->assertEquals(
				0
				, Sco_Math_Func_Distance::azimuth_compass(+0, +0)
		);
	}

	/**
	 * Generated from @assert (+0, +1) == 90.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass2()
	{
		$this->assertEquals(
				90
				, Sco_Math_Func_Distance::azimuth_compass(+0, +1)
		);
	}

	/**
	 * Generated from @assert (+1, +1) == 45.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass3()
	{
		$this->assertEquals(
				45
				, Sco_Math_Func_Distance::azimuth_compass(+1, +1)
		);
	}

	/**
	 * Generated from @assert (+1, +0) == 0.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass4()
	{
		$this->assertEquals(
				0
				, Sco_Math_Func_Distance::azimuth_compass(+1, +0)
		);
	}

	/**
	 * Generated from @assert (+0, -1) == -90.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass5()
	{
		$this->assertEquals(
				-90
				, Sco_Math_Func_Distance::azimuth_compass(+0, -1)
		);
	}

	/**
	 * Generated from @assert (-1, -1) == -135.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass6()
	{
		$this->assertEquals(
				-135
				, Sco_Math_Func_Distance::azimuth_compass(-1, -1)
		);
	}

	/**
	 * Generated from @assert (-1, +0) == 180.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass7()
	{
		$this->assertEquals(
				180
				, Sco_Math_Func_Distance::azimuth_compass(-1, +0)
		);
	}

	/**
	 * Generated from @assert (-1, -1) == -135.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass8()
	{
		$this->assertEquals(
				-135
				, Sco_Math_Func_Distance::azimuth_compass(-1, -1)
		);
	}

	/**
	 * Generated from @assert (5, 5) == 45.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass9()
	{
		$this->assertEquals(
				45
				, Sco_Math_Func_Distance::azimuth_compass(5, 5)
		);
	}

	/**
	 * Generated from @assert (-5, 5) == 135.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass10()
	{
		$this->assertEquals(
				135
				, Sco_Math_Func_Distance::azimuth_compass(-5, 5)
		);
	}

	/**
	 * Generated from @assert (5, -5) == -45.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass11()
	{
		$this->assertEquals(
				-45
				, Sco_Math_Func_Distance::azimuth_compass(5, -5)
		);
	}

	/**
	 * Generated from @assert (-5, -5) == -135.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass12()
	{
		$this->assertEquals(
				-135
				, Sco_Math_Func_Distance::azimuth_compass(-5, -5)
		);
	}

	/**
	 * Generated from @assert (5, 5, 0, 0, 1) == 45.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass13()
	{
		$this->assertEquals(
				45
				, Sco_Math_Func_Distance::azimuth_compass(5, 5, 0, 0, 1)
		);
	}

	/**
	 * Generated from @assert (-5, 5, 0, 0, 1) == 135.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass14()
	{
		$this->assertEquals(
				135
				, Sco_Math_Func_Distance::azimuth_compass(-5, 5, 0, 0, 1)
		);
	}

	/**
	 * Generated from @assert (5, -5, 0, 0, 1) == 315.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass15()
	{
		$this->assertEquals(
				315
				, Sco_Math_Func_Distance::azimuth_compass(5, -5, 0, 0, 1)
		);
	}

	/**
	 * Generated from @assert (-5, -5, 0, 0, 1) == 225.
	 *
	 * @covers Sco_Math_Func_Distance::azimuth_compass
	 */
	public function testAzimuth_compass16()
	{
		$this->assertEquals(
				225
				, Sco_Math_Func_Distance::azimuth_compass(-5, -5, 0, 0, 1)
		);
	}

	/**
	 * Generated from @assert (0, 1) == 'N'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar()
	{
		$this->assertEquals(
				'N'
				, $this->object->polar(0, 1)
		);
	}

	/**
	 * Generated from @assert (1, 0) == 'E'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar2()
	{
		$this->assertEquals(
				'E'
				, $this->object->polar(1, 0)
		);
	}

	/**
	 * Generated from @assert (0, -1) == 'S'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar3()
	{
		$this->assertEquals(
				'S'
				, $this->object->polar(0, -1)
		);
	}

	/**
	 * Generated from @assert (-1, 0) == 'W'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar4()
	{
		$this->assertEquals(
				'W'
				, $this->object->polar(-1, 0)
		);
	}

	/**
	 * Generated from @assert (1, 1) == 'NE'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar5()
	{
		$this->assertEquals(
				'NE'
				, $this->object->polar(1, 1)
		);
	}

	/**
	 * Generated from @assert (-1, 1) == 'NW'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar6()
	{
		$this->assertEquals(
				'NW'
				, $this->object->polar(-1, 1)
		);
	}

	/**
	 * Generated from @assert (1, -1) == 'SE'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar7()
	{
		$this->assertEquals(
				'SE'
				, $this->object->polar(1, -1)
		);
	}

	/**
	 * Generated from @assert (-1, -1) == 'SW'.
	 *
	 * @covers Sco_Math_Func_Distance::polar
	 */
	public function testPolar8()
	{
		$this->assertEquals(
				'SW'
				, $this->object->polar(-1, -1)
		);
	}

	/**
	 * @covers Sco_Math_Func_Distance::HexagonDistance
	 * @todo Implement testHexagonDistance().
	 */
	public function testHexagonDistance()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}

?>
